name: Claude Code Review

# This workflow implements AI-assisted code review as defined in ADR-0013
# See: docs/adr/adr-0013-cicd-strategy-and-github-actions.md

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    # Delete previous Claude Code comments to prevent accumulation
    - name: Delete previous Claude comments
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          // Find comments from github-actions bot that contain AI review content
          const claudeComments = comments.filter(comment =>
            comment.user.login === 'github-actions[bot]' &&
            (comment.body.includes('🤖 AI Code Review') ||
             comment.body.includes('Claude Code Review'))
          );

          // Delete all previous Claude comments
          for (const comment of claudeComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id
            });
          }

    # Extract issue numbers from PR title and description
    - name: Extract issue numbers
      id: extract_issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prTitle = context.payload.pull_request.title;
          const prBody = context.payload.pull_request.body || '';
          const prText = `${prTitle}\n${prBody}`;

          // Extract issue numbers (#123 format)
          const issueMatches = prText.match(/#\d+/g) || [];
          const issueNumbers = issueMatches.map(match => match.substring(1));

          // Extract commit messages to find issue references there too
          const { data: commits } = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          for (const commit of commits) {
            const commitMatches = commit.commit.message.match(/#\d+/g) || [];
            for (const match of commitMatches) {
              const num = match.substring(1);
              if (!issueNumbers.includes(num)) {
                issueNumbers.push(num);
              }
            }
          }

          console.log('Found issue numbers:', issueNumbers);
          return issueNumbers;

    # Fetch issue content for each referenced issue
    - name: Fetch issue content
      id: fetch_issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumbers = ${{ steps.extract_issues.outputs.result }};
          const issues = [];

          for (const issueNumber of issueNumbers) {
            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber)
              });

              // Extract PBI, User Story, and AC from issue body
              const body = issue.body || '';
              issues.push({
                number: issueNumber,
                title: issue.title,
                body: body,
                labels: issue.labels.map(l => l.name)
              });
            } catch (error) {
              console.log(`Could not fetch issue #${issueNumber}:`, error.message);
            }
          }

          return issues;

    # Run Claude code review
    - uses: anthropics/claude-code-action@beta
      with:
        claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        direct_prompt: |
          Please conduct a comprehensive code review of the pull request changes, following the Work Management Service project standards and architecture decisions.

          **CRITICAL: Issue Specification Compliance Check**
          Referenced Issues: ${{ steps.fetch_issues.outputs.result }}

          If there are referenced issues above, you MUST:
          1. Extract the PBI (Product Backlog Item), User Story, and AC (Acceptance Criteria) from each issue
          2. Verify that the implementation strictly adheres to the specifications in the issues
          3. Check that all acceptance criteria are met
          4. Identify any deviations from the specified requirements
          5. Ensure the implementation matches the intent described in the User Story

          Include a dedicated section in your review for "Issue Specification Compliance" where you:
          - List each referenced issue with its PBI and User Story
          - Check each acceptance criterion and mark it as ✅ (met) or ❌ (not met)
          - Explain any gaps or deviations found

          Start by creating a task list of review items you will check, then show progress as you complete each task (e.g., ✅ for completed, 🔄 for in progress).

          First, provide a brief summary of what this PR is trying to achieve based on the changes you see.

          **Project-Specific Coding Standards Check:**

          Frontend (TypeScript/React/Next.js):
          - Verify utilization of TypeScript 5+ + React 19 + Next.js 15 latest features
          - Component placement rules: Single route only→app/{route}/_components/, Multiple routes & specific domain→features/{domain}/components/, App-wide→components/
          - Naming conventions: Components use PascalCase, non-components use camelCase, directories use PascalCase for components and kebab-case for others
          - Proper use of Server Components (default) vs Client Components ('use client')
          - Verify React 19 new features usage (useOptimistic, useActionState, use())
          - Confirm shadcn/ui component usage (ui/ directory must not be edited directly)
          - Consistent API communication via TanStack Query
          - Verify Tailwind CSS + CSS variables usage
          - Proper use of cn() utility for conditional classes
          - Format and lint according to Biome configuration
          - Security: Input validation with zod, verify NEXT_PUBLIC_ prefix for environment variables

          **Architecture Decision Records (ADR) Compliance:**
          Please check compliance with the following ADRs:
          - ADR-001: Next.js with Vercel Architecture
          - ADR-002: Server-side Implementation Architecture
          - ADR-003: Database Integration with Vercel Postgres
          - ADR-004: Development Guidelines and Best Practices
          - ADR-005: UI Library and Data Table Selection

          **API Design Standards Verification:**
          - Response format: Success→{success: true, data: {...}}, Error→{success: false, error: {code, message, details}}
          - Pagination: page/limit parameters, response includes {page, limit, total, totalPages}
          - Date format: ISO 8601 with timezone
          - HTTP status codes: GET/PUT/PATCH→200, POST→201, DELETE→204, Errors→400/404/500

          **Quality Check Items:**
          - Test existence and coverage (Frontend: Vitest/Playwright)
          - Performance impact (unnecessary re-renders, N+1 queries)
          - Security vulnerabilities (XSS, SQL injection, CSRF)
          - Proper error handling
          - Documentation updates (JSDoc/TSDoc)

          **Output Format:**
          1. PR Summary - Brief overview of what this PR implements/changes
          2. Overall Code Quality Assessment
          3. Standards Compliance Status
          4. Issues by Severity (Critical/High/Medium/Low)
          5. Specific Improvement Suggestions with Code Examples
          6. Positive Feedback for Well-Written Code

          **IMPORTANT: Include the task list with progress indicators at the beginning of your review to show what you're checking and your progress.**

          Please provide constructive and practical feedback while strictly adhering to the project's standards and architecture decisions.

          **IMPORTANT: Please write all your review comments and feedback in Japanese (日本語で記載してください).**

          **CRITICAL: When including code examples, ensure proper markdown formatting:**
          - Use triple backticks with language identifier for code blocks
          - Ensure code blocks are properly closed
          - Avoid nested code blocks in lists
          - If showing code in a list item, indent the code block properly

          **Format your response with the following structure:**

          # 🤖 AI Code Review

          ## 📋 タスクリスト
          (Generate a task list based on what needs to be reviewed for this specific PR. Mark completed items with [x])

          ## 📊 レビューサマリー
          [1-2 line summary of what this PR achieves]

          **スコア:** [score]/10

          ## 🔍 主要な発見事項
          - Finding 1
          - Finding 2
          - Finding 3

          <details open>
          <summary>🎯 <b>Issue仕様準拠チェック</b></summary>

          [If issues are referenced, provide detailed compliance check here]

          </details>

          <details open>
          <summary>📄 <b>詳細なレビュー結果</b></summary>

          [Detailed review content organized by sections]

          ### 重要度別の問題点

          #### 🔴 Critical
          [List critical issues]

          #### 🟡 High
          [List high priority issues]

          #### 🟠 Medium
          [List medium priority issues]

          #### 🟢 Low
          [List low priority issues]

          </details>

          <details open>
          <summary>💡 <b>改善提案</b></summary>

          [Specific improvement suggestions]

          **Code examples should use proper markdown syntax:**
          ```language
          // code here
          ```

          </details>
        # Timeout setting (extended for detailed code review)
        timeout_minutes: 20
        # Claude 4 model to use (using Sonnet 4)
        anthropic_model: "claude-sonnet-4-5-20250929"